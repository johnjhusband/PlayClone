name: Release & Publish

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.2.0)'
        required: true
        type: string
      prerelease:
        description: 'Is this a pre-release?'
        required: false
        default: false
        type: boolean

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        registry-url: 'https://registry.npmjs.org'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install Playwright browsers
      run: npx playwright install --with-deps chromium
    
    - name: Run linter
      run: npm run lint
    
    - name: Build
      run: npm run build
    
    - name: Run tests
      run: npm test
    
    - name: Run self-tests
      run: npm run test:self
      continue-on-error: true
    
    - name: Check bundle size
      run: |
        echo "Checking bundle size..."
        npm run build
        du -sh dist/
        # Ensure bundle is under 5MB
        size=$(du -sb dist/ | cut -f1)
        if [ $size -gt 5242880 ]; then
          echo "Bundle size exceeds 5MB limit!"
          exit 1
        fi
    
    - name: Archive build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-artifacts
        path: dist/
        retention-days: 5

  publish-npm:
    needs: build-and-test
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        registry-url: 'https://registry.npmjs.org'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build
      run: npm run build
    
    - name: Configure npm
      run: |
        echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc
        npm config set access public
    
    - name: Determine version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION="${{ github.ref_name }}"
        fi
        echo "version=${VERSION#v}" >> $GITHUB_OUTPUT
    
    - name: Update package version
      run: npm version ${{ steps.version.outputs.version }} --no-git-tag-version
    
    - name: Publish to npm
      run: |
        if [ "${{ github.event.inputs.prerelease }}" = "true" ]; then
          npm publish --tag next
        else
          npm publish
        fi
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
    
    - name: Publish to GitHub Packages
      run: |
        npm config set @${{ github.repository_owner }}:registry https://npm.pkg.github.com
        npm config set //npm.pkg.github.com/:_authToken ${{ secrets.GITHUB_TOKEN }}
        npm publish
      env:
        NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      continue-on-error: true

  create-release:
    needs: publish-npm
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Generate changelog
      id: changelog
      run: |
        # Generate changelog from commits
        echo "# Changelog" > CHANGELOG_TEMP.md
        echo "" >> CHANGELOG_TEMP.md
        
        # Get previous tag
        PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        if [ -n "$PREV_TAG" ]; then
          echo "## Changes since $PREV_TAG" >> CHANGELOG_TEMP.md
          echo "" >> CHANGELOG_TEMP.md
          
          # Features
          features=$(git log $PREV_TAG..HEAD --grep="feat:" --pretty=format:"- %s" | sed 's/feat: //')
          if [ -n "$features" ]; then
            echo "### Features" >> CHANGELOG_TEMP.md
            echo "$features" >> CHANGELOG_TEMP.md
            echo "" >> CHANGELOG_TEMP.md
          fi
          
          # Bug fixes
          fixes=$(git log $PREV_TAG..HEAD --grep="fix:" --pretty=format:"- %s" | sed 's/fix: //')
          if [ -n "$fixes" ]; then
            echo "### Bug Fixes" >> CHANGELOG_TEMP.md
            echo "$fixes" >> CHANGELOG_TEMP.md
            echo "" >> CHANGELOG_TEMP.md
          fi
          
          # Documentation
          docs=$(git log $PREV_TAG..HEAD --grep="docs:" --pretty=format:"- %s" | sed 's/docs: //')
          if [ -n "$docs" ]; then
            echo "### Documentation" >> CHANGELOG_TEMP.md
            echo "$docs" >> CHANGELOG_TEMP.md
            echo "" >> CHANGELOG_TEMP.md
          fi
          
          # Performance
          perf=$(git log $PREV_TAG..HEAD --grep="perf:" --pretty=format:"- %s" | sed 's/perf: //')
          if [ -n "$perf" ]; then
            echo "### Performance" >> CHANGELOG_TEMP.md
            echo "$perf" >> CHANGELOG_TEMP.md
            echo "" >> CHANGELOG_TEMP.md
          fi
          
          # All commits
          echo "### All Changes" >> CHANGELOG_TEMP.md
          git log $PREV_TAG..HEAD --pretty=format:"- %s" >> CHANGELOG_TEMP.md
        else
          echo "Initial release" >> CHANGELOG_TEMP.md
        fi
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name || format('v{0}', github.event.inputs.version) }}
        name: PlayClone ${{ github.ref_name || format('v{0}', github.event.inputs.version) }}
        body_path: CHANGELOG_TEMP.md
        draft: false
        prerelease: ${{ github.event.inputs.prerelease == 'true' }}
        generate_release_notes: true
        files: |
          dist/**/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Update documentation
      run: |
        # Update version in README if needed
        VERSION="${{ steps.version.outputs.version || github.ref_name }}"
        sed -i "s/version-[0-9.]+/version-${VERSION#v}/" README.md || true
        
        # Create version tag in docs
        echo "Released version ${VERSION}" > docs/releases/${VERSION}.md || true
    
    - name: Notify Discord/Slack
      if: success()
      run: |
        VERSION="${{ github.ref_name || format('v{0}', github.event.inputs.version) }}"
        echo "PlayClone ${VERSION} has been released!"
        # Add actual Discord/Slack webhook calls here if configured
      continue-on-error: true

  docker-release:
    needs: publish-npm
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
      continue-on-error: true
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ghcr.io/${{ github.repository }}
          ${{ secrets.DOCKER_USERNAME }}/playclone
        tags: |
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max